defaults:
  # The default for tags is to not run, so we have to explicitly match a filter.
  - build_on_tags: &build_on_tags
      filters:
        tags:
          only: /.*/
  - setup_prerelease_commit_hash: &setup_prerelease_commit_hash
      name: Store commit hash and prerelease
      command: |
        if [ "$CIRCLE_BRANCH" = release -o -n "$CIRCLE_TAG" ]; then echo -n > prerelease.txt; else date -u +"nightly.%Y.%-m.%-d" > prerelease.txt; fi
        echo -n "$CIRCLE_SHA1" > commit_hash.txt
  - run_build: &run_build
      name: Build
      command: |
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo $CMAKE_OPTIONS
        make -j4
  - run_tests: &run_tests
      name: Tests
      command: |
        build/test/soltest -- --no-ipc --testpath "build/test" --run_test=YulRematerialiser/smoke_test
  - solc_artifact: &solc_artifact
      path: build/solc/solc
      destination: solc
  - all_artifacts: &all_artifacts
      root: build
      paths:
        - solc/solc
        - test/soltest
        - test/tools/solfuzzer

version: 2
jobs:
  build_x86_linux:
    docker:
      - image: buildpack-deps:artful
    environment:
      TERM: xterm
      CMAKE_OPTIONS: -DCOVERAGE=ON
    steps:
      - checkout
      - run:
          name: Install build dependencies
          command: |
            apt-get -qq update
            apt-get -qy install cmake libboost-regex-dev libboost-filesystem-dev libboost-test-dev libboost-system-dev libboost-program-options-dev libz3-dev
            ./scripts/install_obsolete_jsoncpp_1_7_4.sh
      - run: *setup_prerelease_commit_hash
      - run: *run_build
      - store_artifacts: *solc_artifact
      - persist_to_workspace:
          root: build
          paths:
            - "*"

  test_x86_linux:
    docker:
      - image: buildpack-deps:artful
    environment:
      TERM: xterm
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run:
          name: Install dependencies
          command: |
            apt-get -qq update
            apt-get -qy install libz3-dev libleveldb1v5 python-pip
            pip install codecov
      - run: mkdir -p test_results
      - run: *run_tests
      - run:
          name: Coverage of all
          command: codecov --flags all --gcov-root build
      - store_test_results:
          path: test_results/

workflows:
  version: 2
  build_all:
    jobs:
      - build_x86_linux: *build_on_tags
      - test_x86_linux:
          <<: *build_on_tags
          requires:
            - build_x86_linux
